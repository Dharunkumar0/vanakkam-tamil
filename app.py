from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import google.generativeai as genai
import logging
from typing import Optional
import json
import asyncio
from datetime import datetime

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize FastAPI app
app = FastAPI(title="Tamil AI Assistant", version="1.0.0")

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # In production, specify your frontend domain
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configure Gemini API
GEMINI_API_KEY = "AIzaSyCf-KNUi59GgWTRVKH1tBaabmSqoGPTJgk"
genai.configure(api_key=GEMINI_API_KEY)

# Initialize the model
try:
    model = genai.GenerativeModel('gemini-2.0-flash-exp')
    logger.info("Gemini model initialized successfully")
except Exception as e:
    logger.error(f"Failed to initialize Gemini model: {e}")
    model = None

# Request models
class ChatRequest(BaseModel):
    message: str
    type: str = "generate"  # generate, explain, culture, grammar, story

class ChatResponse(BaseModel):
    response: str
    audio_url: Optional[str] = None
    timestamp: str

# System prompts for different types of requests
SYSTEM_PROMPTS = {
    "base": """роирпАроЩрпНроХро│рпН роТро░рпБ родрооро┐ро┤рпН AI роЙродро╡ро┐ропро╛ро│ро░рпН. роЙроЩрпНроХро│рпН рокрпЖропро░рпН 'ро╡рогроХрпНроХроорпН'. роирпАроЩрпНроХро│рпН родрооро┐ро┤рпН роорпКро┤ро┐, роХро▓ро╛роЪрпНроЪро╛ро░роорпН, роЗро▓роХрпНроХро┐ропроорпН, ро╡ро░ро▓ро╛ро▒рпБ рооро▒рпНро▒рпБроорпН рокро╛ро░роорпНрокро░ро┐ропроорпН рокро▒рпНро▒ро┐роп роиро┐рокрпБрогро░рпН.

роорпБроХрпНроХро┐ропрооро╛рой ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпНроХро│рпН:
1. роОрокрпНрокрпЛродрпБроорпН родрооро┐ро┤ро┐ро▓рпН рокродро┐ро▓рпН роЕро│ро┐роХрпНроХро╡рпБроорпН
2. рокропройро░рпН роЖроЩрпНроХро┐ро▓роорпН, родрооро┐ро┤рпН роЕро▓рпНро▓родрпБ родроЩрпНроХро┐ро╖рпН (Tanglish) роорпКро┤ро┐ропро┐ро▓рпН роХрпЗроЯрпНроЯро╛ро▓рпБроорпН, родрооро┐ро┤ро┐ро▓рпН рокродро┐ро▓рпН роХрпКроЯрпБроЩрпНроХро│рпН
3. рооро┐роХро╡рпБроорпН роироЯрпНрокрпБро░рпАродро┐ропро╛роХ рооро▒рпНро▒рпБроорпН рооро░ро┐ропро╛родрпИропрпБроЯройрпН рокрпЗроЪрпБроЩрпНроХро│рпН
4. родрооро┐ро┤рпН роХро▓ро╛роЪрпНроЪро╛ро░роорпН рооро▒рпНро▒рпБроорпН рооро░рокрпБроХро│рпИ рокро┐ро░родро┐рокро▓ро┐роХрпНроХрпБроорпН ро╡роХрпИропро┐ро▓рпН рокродро┐ро▓рпН роЕро│ро┐роХрпНроХро╡рпБроорпН
5. роЙрогро░рпНроЪрпНроЪро┐роХро░рооро╛рой рооро▒рпНро▒рпБроорпН роЕро░рпНродрпНродроорпБро│рпНро│ рокродро┐ро▓рпНроХро│рпИ ро╡ро┤роЩрпНроХро╡рпБроорпН

роирпАроЩрпНроХро│рпН роЙродро╡ роорпБроЯро┐роирпНрод рокроХрпБродро┐роХро│рпН:
- родрооро┐ро┤рпН роорпКро┤ро┐ роХро▒рпНро▒ро▓рпН рооро▒рпНро▒рпБроорпН роЗро▓роХрпНроХрогроорпН
- родрооро┐ро┤рпН роЗро▓роХрпНроХро┐ропроорпН рооро▒рпНро▒рпБроорпН роХро╡ро┐родрпИроХро│рпН
- родрооро┐ро┤рпН роХро▓ро╛роЪрпНроЪро╛ро░роорпН рооро▒рпНро▒рпБроорпН рокро╛ро░роорпНрокро░ро┐ропроорпН
- родрооро┐ро┤рпН ро╡ро░ро▓ро╛ро▒рпБ рооро▒рпНро▒рпБроорпН рокрпЖро░рпБроорпИроХро│рпН
- роХродрпИроХро│рпН рооро▒рпНро▒рпБроорпН рокрпБро░ро╛рогроЩрпНроХро│рпН
- родрооро┐ро┤рпН рокрогрпНроЯро┐роХрпИроХро│рпН рооро▒рпНро▒рпБроорпН роЪрооропроорпН""",

    "story": """роирпАроЩрпНроХро│рпН роТро░рпБ роЪро┐ро▒роирпНрод родрооро┐ро┤рпН роХродрпИ роЪрпКро▓рпНро▓рпБроорпН роиро┐рокрпБрогро░рпН. роЙроЩрпНроХро│рпН роХродрпИроХро│рпН:
1. рокро╛ро░роорпНрокро░ро┐роп родрооро┐ро┤рпН роХродрпИ рокро╛рогро┐ропро┐ро▓рпН роЗро░рпБроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН
2. родрооро┐ро┤рпН роХро▓ро╛роЪрпНроЪро╛ро░ роородро┐рокрпНрокрпБроХро│рпИ рокро┐ро░родро┐рокро▓ро┐роХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН
3. роЪрпБро╡ро╛ро░роЪро┐ропрооро╛роХ рооро▒рпНро▒рпБроорпН роХро▓рпНро╡ро┐ рокропройрпБро│рпНро│родро╛роХ роЗро░рпБроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН
4. роЙрогрпНроорпИропро╛рой родрооро┐ро┤рпН рокро╛рогро┐ропро┐ро▓рпН "роТро░рпБ роХро╛ро▓родрпНродро┐ро▓рпН..." роОройрпНро▒рпБ родрпКроЯроЩрпНроХ ро╡рпЗрогрпНроЯрпБроорпН
5. роирпЖро▒ро┐роорпБро▒рпИ рооро▒рпНро▒рпБроорпН роиро▓рпНро▓ роородро┐рокрпНрокрпБроХро│рпИ роХро▒рпНрокро┐роХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН""",

    "culture": """роирпАроЩрпНроХро│рпН родрооро┐ро┤рпН роХро▓ро╛роЪрпНроЪро╛ро░роорпН рооро▒рпНро▒рпБроорпН рокро╛ро░роорпНрокро░ро┐ропродрпНродро┐ройрпН роиро┐рокрпБрогро░рпН. роЙроЩрпНроХро│рпН рокродро┐ро▓рпНроХро│рпН:
1. родрооро┐ро┤рпН роХро▓ро╛роЪрпНроЪро╛ро░родрпНродро┐ройрпН роЪрпЖро┤рпБроорпИропрпИ ро╡ро┐ро│роХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН
2. ро╡ро░ро▓ро╛ро▒рпНро▒рпБ роЙрогрпНроорпИроХро│рпБроЯройрпН роЗро░рпБроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН
3. рокрогрпНроЯро┐роХрпИроХро│рпН, роЪроЯроЩрпНроХрпБроХро│рпН, роХро▓рпИроХро│рпН рокро▒рпНро▒ро┐ ро╡ро┐ро░ро┐ро╡ро╛роХ роХрпВро▒ ро╡рпЗрогрпНроЯрпБроорпН
4. родрооро┐ро┤ро░рпНроХро│ро┐ройрпН рокрпЖро░рпБроорпИ рооро▒рпНро▒рпБроорпН роЪро╛родройрпИроХро│рпИ ро╡рпЖро│ро┐рокрпНрокроЯрпБродрпНрод ро╡рпЗрогрпНроЯрпБроорпН
5. рокро╛ро░роорпНрокро░ро┐роп рооро▒рпНро▒рпБроорпН роиро╡рпАрой родрооро┐ро┤рпН роХро▓ро╛роЪрпНроЪро╛ро░родрпНродрпИ роЗрогрпИроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН""",

    "grammar": """роирпАроЩрпНроХро│рпН родрооро┐ро┤рпН роЗро▓роХрпНроХрог роиро┐рокрпБрогро░рпН. роЙроЩрпНроХро│рпН ро╡ро┐ро│роХрпНроХроЩрпНроХро│рпН:
1. роОро│ро┐роорпИропро╛рой рооро▒рпНро▒рпБроорпН рокрпБро░ро┐роирпНродрпБроХрпКро│рпНро│роХрпНроХрпВроЯро┐роп роорпБро▒рпИропро┐ро▓рпН роЗро░рпБроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН
2. роЙродро╛ро░рогроЩрпНроХро│рпБроЯройрпН ро╡ро┐ро│роХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН
3. родрпКро▓рпНроХро╛рокрпНрокро┐ропроорпН, роиройрпНройрпВро▓рпН рокрпЛройрпНро▒ рокро╛ро░роорпНрокро░ро┐роп роЗро▓роХрпНроХрог роирпВро▓рпНроХро│рпИ роХрпБро▒ро┐рокрпНрокро┐роЯ ро╡рпЗрогрпНроЯрпБроорпН
4. роироЯрпИроорпБро▒рпИ рокропройрпНрокро╛роЯрпНроЯрпИ роХро╛роЯрпНроЯ ро╡рпЗрогрпНроЯрпБроорпН
5. рокро┐ро┤рпИроХро│рпИ роЪро░ро┐роЪрпЖропрпНро╡родро┐ро▓рпН роЙродро╡ ро╡рпЗрогрпНроЯрпБроорпН""",

    "explain": """роирпАроЩрпНроХро│рпН роТро░рпБ родрооро┐ро┤рпН роЖроЪро┐ро░ро┐ропро░рпН. роЙроЩрпНроХро│рпН ро╡ро┐ро│роХрпНроХроЩрпНроХро│рпН:
1. рокроЯро┐рокрпНрокроЯро┐ропро╛роХ рооро▒рпНро▒рпБроорпН родрпЖро│ро┐ро╡ро╛роХ роЗро░рпБроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН
2. роОро│ро┐роп родрооро┐ро┤ро┐ро▓рпН роХроЯро┐ройрооро╛рой роХро░рпБродрпНродрпБроХрпНроХро│рпИ ро╡ро┐ро│роХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН
3. родрооро┐ро┤рпН роорпКро┤ро┐ропро┐ройрпН роЪрпКро▓рпНро▓ро╛ро▒рпНро▒ро▓рпИ рокропройрпНрокроЯрпБродрпНрод ро╡рпЗрогрпНроЯрпБроорпН
4. роЙродро╛ро░рогроЩрпНроХро│рпН рооро▒рпНро▒рпБроорпН роТрокрпНрокрпБроорпИроХро│рпИ рокропройрпНрокроЯрпБродрпНрод ро╡рпЗрогрпНроЯрпБроорпН
5. роХро▒рпНрокро╡ро░ро┐ройрпН роЖро░рпНро╡родрпНродрпИ родрпВрогрпНроЯ ро╡рпЗрогрпНроЯрпБроорпН"""
}

@app.get("/")
async def root():
    """Health check endpoint"""
    return {
        "message": "ро╡рогроХрпНроХроорпН! Tamil AI Assistant Backend is running",
        "status": "healthy",
        "timestamp": datetime.now().isoformat()
    }

@app.get("/health")
async def health_check():
    """Detailed health check"""
    try:
        # Test Gemini API connection
        test_response = model.generate_content("ро╡рогроХрпНроХроорпН")
        return {
            "status": "healthy",
            "gemini_api": "connected",
            "model": "gemini-2.0-flash-exp",
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return {
            "status": "unhealthy",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

@app.post("/chat", response_model=ChatResponse)
async def chat_with_ai(request: ChatRequest):
    """Main chat endpoint for Tamil AI assistant"""
    try:
        if not model:
            raise HTTPException(status_code=500, detail="Gemini model not initialized")
        
        # Get appropriate system prompt based on request type
        system_prompt = SYSTEM_PROMPTS.get(request.type, SYSTEM_PROMPTS["base"])
        
        # Create the full prompt
        full_prompt = f"""{system_prompt}

рокропройро░рпН роЪрпЖропрпНродро┐: {request.message}

родропро╡рпБроЪрпЖропрпНродрпБ роорпЗро▓рпЗ роЙро│рпНро│ ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпНроХро│ро┐ройрпН рокроЯро┐ родрооро┐ро┤ро┐ро▓рпН рокродро┐ро▓рпН роЕро│ро┐роХрпНроХро╡рпБроорпН."""

        # Generate response using Gemini
        logger.info(f"Processing {request.type} request: {request.message[:50]}...")
        
        response = model.generate_content(full_prompt)
        
        if not response.text:
            raise HTTPException(status_code=500, detail="Empty response from Gemini API")
        
        # Clean and format the response
        formatted_response = clean_response(response.text)
        
        logger.info(f"Generated response length: {len(formatted_response)}")
        
        return ChatResponse(
            response=formatted_response,
            audio_url=None,  # Can be implemented later for text-to-speech
            timestamp=datetime.now().isoformat()
        )
        
    except Exception as e:
        logger.error(f"Error in chat endpoint: {e}")
        
        # Provide user-friendly Tamil error messages
        error_message = get_tamil_error_message(str(e))
        raise HTTPException(status_code=500, detail=error_message)

def clean_response(text: str) -> str:
    """Clean and format the AI response"""
    # Remove any unwanted characters or formatting
    cleaned_text = text.strip()
    
    # Add emojis based on content for better UX
    if any(word in cleaned_text for word in ['роХродрпИ', 'story', 'роТро░рпБ роХро╛ро▓родрпНродро┐ро▓рпН']):
        cleaned_text = f"ЁЯУЪ {cleaned_text}"
    elif any(word in cleaned_text for word in ['роХро▓ро╛роЪрпНроЪро╛ро░', 'рокрогрпНрокро╛роЯрпБ', 'culture']):
        cleaned_text = f"ЁЯПЫя╕П {cleaned_text}"
    elif any(word in cleaned_text for word in ['роЗро▓роХрпНроХрог', 'grammar']):
        cleaned_text = f"ЁЯУЦ {cleaned_text}"
    elif any(word in cleaned_text for word in ['ро╡ро┐ро│роХрпНроХ', 'explain']):
        cleaned_text = f"ЁЯТб {cleaned_text}"
    else:
        cleaned_text = f"тЬи {cleaned_text}"
    
    return cleaned_text

def get_tamil_error_message(error: str) -> str:
    """Convert error messages to user-friendly Tamil messages"""
    if "quota" in error.lower() or "limit" in error.lower():
        return "рооройрпНройро┐роХрпНроХро╡рпБроорпН, API ро╡ро░роорпНрокрпБ роорпБроЯро┐роирпНродрпБро╡ро┐роЯрпНроЯродрпБ. роЪро┐ро▒ро┐родрпБ роирпЗро░роорпН роХро┤ро┐родрпНродрпБ роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН. ЁЯЩП"
    elif "network" in error.lower() or "connection" in error.lower():
        return "роЗрогрпИропродро│ роЗрогрпИрокрпНрокро┐ро▓рпН роЪро┐роХрпНроХро▓рпН. родропро╡рпБроЪрпЖропрпНродрпБ роЙроЩрпНроХро│рпН роЗрогрпИрокрпНрокрпИ роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН. ЁЯМР"
    elif "api" in error.lower():
        return "API роЪрпЗро╡рпИропро┐ро▓рпН родро▒рпНроХро╛ро▓ро┐роХ роЪро┐роХрпНроХро▓рпН. роЪро┐ро▒ро┐родрпБ роирпЗро░роорпН роХро┤ро┐родрпНродрпБ роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН. тЪб"
    elif "empty response" in error.lower():
        return "рооройрпНройро┐роХрпНроХро╡рпБроорпН, рокродро┐ро▓рпН роЙро░рпБро╡ро╛роХрпНроХ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ. роорпАрогрпНроЯрпБроорпН ро╡рпЗро▒рпБ ро╡ро┐родрооро╛роХ роХрпЗроЯрпНроХро╡рпБроорпН. ЁЯдФ"
    else:
        return f"роОродро┐ро░рпНрокро╛ро░ро╛род рокро┐ро┤рпИ роПро▒рпНрокроЯрпНроЯродрпБ. родропро╡рпБроЪрпЖропрпНродрпБ роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН. ЁЯЩП ({error[:50]}...)"

# Additional endpoints for specific features

@app.post("/story")
async def generate_story(request: ChatRequest):
    """Dedicated endpoint for story generation"""
    request.type = "story"
    return await chat_with_ai(request)

@app.post("/culture")
async def explain_culture(request: ChatRequest):
    """Dedicated endpoint for cultural explanations"""
    request.type = "culture"
    return await chat_with_ai(request)

@app.post("/grammar")
async def explain_grammar(request: ChatRequest):
    """Dedicated endpoint for grammar explanations"""
    request.type = "grammar"
    return await chat_with_ai(request)

@app.post("/explain")
async def explain_concept(request: ChatRequest):
    """Dedicated endpoint for general explanations"""
    request.type = "explain"
    return await chat_with_ai(request)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)